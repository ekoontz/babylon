;; ,---------------------,
;; | expansion-defaults  | -> constraints
;; `---------------------'
;;
;; expansion-defaults turn a single lexeme into a set of alternatives
;; for example, if a verb has no object specified, the lexeme
;; will be turned into a set of two lexemes, where one variants
;; is intransitive, and the other is transitive.
;; in other cases, the set may be just a single member: the lexeme
;; that was unified with the expansion-default.
;;
;; Expansion-defaults apply cyclically over each set of lexemes in
;; a lexicon's value until a fixed point is reached.
;;
[;; common nouns
 {:cat :noun
  :propernoun false
  :pronoun false}
 [{:agr {:number :sing}}
  {:agr {:number :plur}}]

 ;; plural common nouns have two variants: one
 ;; subcategorizes for a determiner ("the cats sleep");
 ;; the other does not subcategorize for a determiner ("dogs walk")
 {:cat :noun
  :propernoun false
  :pronoun false
  :agr {:number :plur}}
 [{:subcat []}
  {:subcat {:1 {:cat :det}}}]

 ;; verbs have two subcategorization frames: intransitive and transitive.
 {:cat :verb}
 [{:subcat {:1 {:cat :noun}
            :2 []}}
  {:subcat {:1 {:cat :noun}
            :2 {:cat :noun}}}]

 ;; verbs with a direct object:
 {:cat :verb
  :subcat {:2 {:cat :noun}}}
 [;; either the object is a reflexive pronoun that agrees with the subject:
  (let [agr (atom :top)]
    {:agr agr
     :subcat {:2 {:agr agr
                  :pronoun true
                  :reflexive true}}})
  
  ;; or is not reflexive (and has no agreement relation to the subject).
  {:subcat {:2 {:case :acc
                :reflexive false}}}]]


 


