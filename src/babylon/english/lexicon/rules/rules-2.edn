[{:rule :determiner-expansion
  :if {:cat :det
       :agr ::unspec}
  :then [{:agr {:number :sing}}
         {:agr {:number :plur}}]}

 {:rule :common-noun
  :if {:cat :noun
       :propernoun false
       :pronoun false
       :subcat ::unspec
       :agr {:number ::unspec}}
  :then [(let [agr (atom {:number :sing
                          :person :3rd})]
           {:cat :noun
            :reflexive false
            :propernoun false
            :pronoun false
            :agr agr
            :subcat {:1 {:cat :det :agr agr}
                     :2 []}})
         (let [agr (atom {:number :plur
                          :person :3rd})]
           {:cat :noun
            :reflexive false
            :propernoun false
            :pronoun false
            :agr agr
            :subcat {:1 {:cat :det :agr agr}
                     :2 []}})
         {:cat :noun
          :reflexive false
          :propernoun false
          :pronoun false
          :agr {:number :plur
                :person :3rd}
          :subcat []}]}

 {:rule :irregular-plural-common-noun
  :if {:cat :noun
       :propernoun false
       :pronoun false
       :regular false
       :subcat ::unspec
       :agr {:number :plur}}
  :then [(let [agr (atom {:number :plur
                          :person :3rd})]
           {:cat :noun
            :reflexive false
            :propernoun false
            :pronoun false
            :agr agr
            :subcat {:1 {:cat :det :agr agr}
                     :2 []}})
         {:cat :noun
          :reflexive false
          :propernoun false
          :pronoun false
          :agr {:number :plur
                :person :3rd}
          :subcat []}]}

 {:rule :irregular-singular-common-noun
  :if {:cat :noun
       :propernoun false
       :pronoun false
       :regular false
       :subcat ::unspec
       :agr {:number :sing}}
  :then [(let [agr (atom {:number :sing
                          :person :3rd})]
           {:cat :noun
            :reflexive false
            :propernoun false
            :pronoun false
            :agr agr
            :subcat {:1 {:cat :det :agr agr}
                     :2 []}})]}

 {:rule :reflexive-is-accusative
  :if {:cat :noun
       :pronoun true
       :reflexive true}
  :then [{:propernoun false
          :subcat []
          :case :acc}]}

 {:rule :nonreflexive
  :if {:cat :noun
       :pronoun true
       :reflexive false}
  :then [{:propernoun false
          :subcat []}]}

 {:rule :propernoun
  :if {:cat :noun
       :pronoun false
       :propernoun true}
  :then [{:agr {:person :3rd
                :number :sing}
          :reflexive false
          :subcat []}]}
 
 {:rule :transitive-verbs
  :if {:cat :verb
       :subcat {:1 {:cat :noun}
                :2 {:cat :noun}}}
  :then [;; non-reflexive: subject and object are distinct and unrelated grammatically.
         (let [subj (atom :top)
               obj (atom :top)]
           {:derivation {:2 {:transitive-verbs {:reflexive false}}}
            :reflexive false
            :sem {:subj subj
                  :obj obj}
            :subcat {:1 {:cat :noun
                         :case :nom
                         :sem subj}
                     :2 {:cat :noun
                         :reflexive false
                         :case :acc
                         :sem obj}}})

         ;; reflexive: subject and object are the same semantically and by agreement.
         (let [subj (atom :top)
               agr (atom :top)]
           {:derivation {:2 {:transitive-verbs {:reflexive true}}}
            :reflexive true
            :sem {:subj subj
                  :obj subj}
            :subcat {:1 {:agr agr
                         :cat :noun
                         :case :nom
                         :sem subj}
                     :2 {:agr agr
                         :phrasal false
                         :reflexive true
                         :cat :noun
                         :sem subj
                         :case :acc}}})]}

 {:rule :ditransitive-verbs
  :if {:cat :verb
       :subcat {:1 {:cat :noun}
                :2 {:cat :noun}
                :3 {:cat :prep}}}
  :then [(let [subj (atom :top)
               obj (atom :top)]
           {:sem {:subj subj
                  :obj obj}
            :subcat {:1 {:cat :noun
                         :case :nom
                         :sem subj}
                     :2 {:cat :noun
                         :case :acc
                         :sem obj}
                     :3 {:cat :prep
                         :phrasal false}}})]} ;; for testing: eventually will be phrasal true (prepositional phrase).
 
 {:rule :intransitive-verbs
  :if {:cat :verb
       :subcat {:1 {:cat :noun}
                :2 []}}
  :then [(let [subj (atom :top)]
           {:sem {:subj subj
                  :obj :unspec}
            :reflexive false
            :subcat {:1 {:sem subj
                         :cat :noun
                         :case :nom}
                     :2 []}})]}

 {:rule :aux-verbs-with-verb-arg
  :if {:cat :verb
       :aux true
       :subcat {:2 {:cat :verb}}}
  :then (let [agr (atom :top)
              sem (atom :top)
              subject (atom {:agr agr
                             :cat :noun
                             :subcat []})
              reflexive (atom :top)
              verb-argument
              {:agr agr
               :modal false
               :reflexive reflexive
               :slash false
               :aux false
               :cat :verb
               :sem sem
               :subcat {:1 subject
                        :2 []}}
              verb-argument-slash
              {:agr agr
               :modal false
               :reflexive reflexive
               :slash true
               :aux false
               :cat :verb
               :sem sem
               :subcat {:1 subject
                        :2 {:top :top}}}]
          
          [;; [s .she *[vp-aux *has .seen]]
           {:agr agr
            :derivation {:2 {:aux-verbs-with-verb-arg {:sense 1}}}
            :reflexive reflexive
            :sem sem
            :subcat {:1 subject
                     :2 verb-argument}}

           ;; [nbar *cat .[s-slash .she *[vp-aux-slash *has .seen]]]
           {:agr agr
            :derivation {:2 {:aux-verbs-with-verb-arg {:sense 2}}}
            :reflexive reflexive
            :sem sem
            :subcat {:1 subject
                     :2 verb-argument-slash}}])}]
