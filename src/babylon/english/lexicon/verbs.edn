{
 "ask" [{:cat :verb :sem {:pred :ask}}]
 "be" (let [exceptions [{:infl :present :agr {:person :1st :number :sing} :surface "am"}
                        {:infl :present :agr {:person :3rd :number :sing} :surface "is"}
                        {:infl :present :surface "are"}
                        {:infl :past-simple :agr {:number :plur} :surface "were"}
                        {:infl :past-simple :agr {:person :2nd} :surface "were"}
                        {:infl :past-simple :surface "was"}
                        {:infl :past-participle :surface "been"}]
            ;; the 3 possible subcategorizations for "be":
            ;; 1. "I am"
            subject-only {:1 {:cat :noun}
                          :2 []}

            ;; 2. "I am a student"
            subject-object-noun
            (let [number (atom :top)]
              {:1 {:cat :noun
                   :agr {:number number}}
               :2 {:cat :noun
                   :subcat []
                   :agr {:number number}}
               :3 []})

            ;; 3. "I am sure"
            subject-adjective {:1 {:cat :noun}
                               :2 {:cat :adjective}
                               :3 []}]
        [{:cat :verb
          :sem {:pred :be}
          :subcat subject-only
          :exceptions exceptions}
         {:cat :verb
          :sem {:pred :be}
          :subcat subject-object-noun
          :exceptions exceptions}
         {:cat :verb
          :reflexive false
          :sem {:pred :be}
          :subcat subject-adjective
          :exceptions exceptions}
         {:cat :verb ;; "is sleeping"
          :derivation {:sense 4}
          :aux true
          :infl :present
          :sem {:tense :present
                :aspect :progressive}
          :subcat {:2 {:infl :gerund}}
          :exceptions exceptions}
         {:cat :verb ;; "is" (aux sense)
          :derivation {:sense 5}
          :aux true
          :infl :present
          :sem {:tense :present
                :aspect :progressive}
          :subcat {:2 []}
          :exceptions exceptions}
         {:cat :verb ;; "was sleeping"
          :derivation {:sense 6}
          :aux true
          :infl :past-simple
          :sem {:tense :past
                :aspect :progressive}
          :subcat {:2 {:infl :gerund}}
          :exceptions exceptions}
         {:cat :verb ;; "was" (aux sense)
          :derivation {:sense 7}
          :aux true
          :infl :past-simple
          :sem {:tense :past
                :aspect :progressive}
          :subcat {:2 []}
          :exceptions exceptions}])

 "become" (let [exceptions [{:infl :past-simple
                             :surface "became"}
                            {:infl :past-participle
                             :surface "become"}]]
           [{:cat :verb :sem {:pred :become}
             :exceptions exceptions}])

 "begin" (let [exceptions [{:infl :past-simple
                            :surface "began"}
                           {:infl :past-participle
                            :surface "begun"}]]
          [{:cat :verb :sem {:pred :begin}
            :exceptions exceptions}])

 "call" [{:cat :verb :sem {:pred :call}}]

 "can" [{:modal :base
         :cat :verb
         :inflected? true
         :sem {:pred :be-able-to}}]

 "come" (let [exceptions [{:infl :past-simple
                           :surface "came"}
                          {:infl :past-participle
                           :surface "come"}]]
          [{:cat :verb :sem {:pred :come} :subcat {:2 []}
            :exceptions exceptions}])
 
 "do" (let [exceptions [{:infl :past-simple :surface "did"}
                        {:infl :past-participle :surface "done"}]
            agr (atom :top)]
        [{;; "I do", "I did"
          :exceptions exceptions
          :derivation {:sense 1}
          :cat :verb :sem {:pred :do}}
         
         ;; "do you sleep?", "does he sleep?"
         {:agr agr
          :exceptions exceptions
          :cat :verb
          :aux true
          :infl :present
          :derivation {:sense 2}
          :sem {:aspect :habitual
                :tense :present
                :mood :interog}
          :subcat {:1 {:cat :verb
                       :aux false
                       :agr agr
                       :rule "s-comp"
                       :phrasal true
                       :sem {:mood :decl}
                       :subcat []
                       :infl :base}
                   :2 []}}

         ;; "did you sleep?"
         (let [sem (atom {:tense :past
                          :mood :interog})]
           {:agr agr
            :exceptions exceptions
            :cat :verb
            :aux true
            :infl :past-simple
            :derivation {:sense 3}
            :sem sem
            :subcat {:1 {:cat :verb
                         :aux false
                         :agr agr
                         :rule "s-comp"
                         :phrasal true
                         :sem sem
                         :subcat []
                         :infl :base}
                     :2 []}})

         ;; "what does she see?"
         (let [sem (atom {:tense :past
                          :mood :interog
                          :aspect :progressive})]
           {:agr agr
            :exceptions exceptions
            :cat :verb
            :reflexive false
            :aux true
            :infl :past-simple
            :derivation {:sense 4}
            :sem sem
            :surface "did"
            :subcat {:1 {:cat :verb
                         :slash true
                         :aux false
                         :agr agr
                         :phrasal true
                         :sem sem
                         :subcat {:1 {:wh-word true}
                                  :2 []}
                         :infl :base}
                     :2 []}})
         ;; "what did she see?"
         (let [sem (atom {:tense :present
                          :mood :interog
                          :aspect :progressive})]
           {:agr agr
            :exceptions exceptions
            :cat :verb
            :reflexive false
            :aux true
            :infl :present
            :surface "does"
            :derivation {:sense 5}
            :sem sem
            :subcat {:1 {:cat :verb
                         :slash true
                         :aux false
                         :agr agr
                         :phrasal true
                         :sem sem
                         :subcat {:1 {:wh-word true}
                                  :2 []}
                         :infl :base}
                     :2 []}})])
 
 "eat" (let [exceptions [{:infl :past-simple :surface "ate"}
                         {:infl :past-participle :surface "eaten"}]]
         [{:exceptions exceptions :cat :verb :sem {:pred :eat}}])
 "feel" (let [exceptions [{:infl :past-simple :surface "felt"}
                          {:infl :past-participle :surface "felt"}]]
           [{:exceptions exceptions :cat :verb :sem {:pred :feel}}])
 "find" (let [exceptions [{:infl :past-simple :surface "found"}
                          {:infl :past-participle :surface "found"}]]
          [{:exceptions exceptions :cat :verb :sem {:pred :find}}])
 "get" (let [exceptions [{:infl :past-simple :surface "got"}
                         {:infl :past-participle :surface "got"}]]
         [{:exceptions exceptions :cat :verb :sem {:pred :get}}])

 "give" (let [exceptions [{:infl :past-simple :surface "gave"}
                          {:infl :past-participle :surface "given"}]]
          [{:exceptions exceptions
            :subcat {:2 {:cat :prep
                         :sem {:pred :to}}
                     :3 {:cat :noun}}
            :cat :verb
            :sem {:pred :give}}])
 "go"
 (let [exceptions [{:infl :past-simple :surface "went"}
                   {:infl :past-participle :surface "gone"}]]
   [{:exceptions exceptions
     :cat :verb :sem {:pred :go}
     :subcat {:2 []}}
    {:exceptions exceptions
     :cat :verb :sem {:pred :go}
     :subcat {:2 {:cat :prep
                  :sem {:pred :to}}
              :3 []}}])
 "have" (let [aux-exceptions [{:agr {:person :1st} :surface "have" :infl :present
                               :sem {:tense :past
                                     :aspect :perfect}}
                              {:agr {:person :2nd} :surface "have" :infl :present
                               :sem {:tense :past
                                     :aspect :perfect}}
                              {:agr {:person :3rd :number :sing} :surface "has"
                               :infl :present
                               :sem {:tense :past
                                     :aspect :perfect}}
                              {:agr {:person :3rd :number :plur} :surface "have"
                               :infl :present
                               :sem {:tense :past
                                     :aspect :perfect}}
                              {:surface "had"
                               :infl :past-simple
                               :sem {:tense :past
                                     :aspect :pluperfect}}
                              {:surface "had"
                               :infl :past-participle}]
              exceptions [{:infl :present :agr {:person :1st} :surface "have"}
                          {:infl :present :agr {:person :2nd} :surface "have"}
                          {:infl :present
                           :agr {:person :3rd :number :sing} :surface "has"}
                          {:infl :present :agr {:person :3rd :number :plur} :surface "have"}
                          {:infl :past-simple :surface "had"}
                          {:infl :past-participle :surface "had"}]]
          [{:cat :verb
            ;; {:aux false} not needed because of rule: aux-default-is-false,
            ;; but made explicit for contrast with aux=true senses below of this verb.
            :aux false
            :derivation {:sense 1}
            :sem {:pred :have}
            :exceptions exceptions}
           {:cat :verb
            :aux true
            :derivation {:sense 2}
            :sem {:tense :past
                  :aspect :perfect}
            :subcat {:2 []}
            :exceptions aux-exceptions}
           {:cat :verb
            :aux true
            :derivation {:sense 3}
            :sem {:tense :past
                  :aspect :perfect}
            :subcat {:2 {:infl :past-participle}}
            :exceptions aux-exceptions}
           {:cat :verb
            :aux true
            :derivation {:sense 4}
            :sem {:tense :past
                  :aspect :pluperfect}
            :subcat {:2 []}
            :exceptions aux-exceptions}
           {:cat :verb
            :aux true
            :derivation {:sense 5}
            :sem {:tense :past
                  :aspect :pluperfect}
            :subcat {:2 {:infl :past-participle}}
            :exceptions aux-exceptions}])

 "hear" (let [exceptions [{:infl :past-simple :surface "heard"}
                          {:infl :past-participle :surface "heard"}]]
          [{:exceptions exceptions :cat :verb :sem {:pred :hear}}])
 "help" [{:cat :verb :sem {:pred :help} :subcat {:1 :top :2 :top}}]
 "keep" (let [exceptions [{:infl :past-simple :surface "kept"}
                          {:infl :past-participle :surface "kept"}]]
           [{:exceptions exceptions :cat :verb :sem {:pred :keep}}])
 "know" (let [exceptions [{:infl :past-simple :surface "knew"}
                          {:infl :past-participle :surface "known"}]]
          [{:exceptions exceptions :cat :verb :sem {:pred :know}}])
 "leave" (let [exceptions [{:infl :past-simple :surface "left"}
                           {:infl :past-participle :surface "left"}]]
           [{:exceptions exceptions :cat :verb :sem {:pred :leave}}])
 "let" (let [exceptions [{:infl :past-simple :surface "let"}
                         {:infl :past-participle :surface "let"}]]
          [{:exceptions exceptions :cat :verb :sem {:pred :let}}])
 "like" [{:cat :verb :sem {:pred :like}}]
 "live" [{:cat :verb :sem {:pred :live}}]
 "look" [{:cat :verb :sem {:pred :look}
          :subcat {:1 :top :2 []}}
         {:cat :verb :sem {:pred :look}
          :subcat {:1 :top
                   :2 {:cat :prep
                       :sem {:pred :at}}
                   :3 []}}]
 "make" (let [exceptions [{:infl :past-simple :surface "made"}
                          {:infl :past-participle :surface "made"}]]
           [{:exceptions exceptions :cat :verb :sem {:pred :make}}])
 "mean" (let [exceptions [{:infl :past-simple :surface "meant"}
                          {:infl :past-participle :surface "meant"}]]
          [{:exceptions exceptions :cat :verb :sem {:pred :mean}}])
 "move" [{:cat :verb :sem {:pred :move} :subcat {:1 :top :2 :top}}]

 "must" [{:modal :base
          :cat :verb
          :inflected? true
          :sem {:pred :must}}]
 "need" [{:cat :verb
          :sem {:pred :need}
          :modal :infinitive}]
 "play" [{:cat :verb :sem {:pred :play}}]
 "put" (let [exceptions [{:infl :past-simple :surface "put"}
                         {:infl :past-participle :surface "put"}]]
         [{:exceptions exceptions
           :subcat {:2 {:cat :prep
                        :sem {:pred :on}}
                    :3 {:cat :noun}}
           :cat :verb
           :sem {:pred :put-on}}
          {:exceptions exceptions
           :subcat {:2 {:cat :prep
                        :sem {:pred :in}}
                    :3 {:cat :noun}}
           :cat :verb
           :sem {:pred :put-in}}])
 "run" (let [exceptions [{:infl :past-simple :surface "ran"}
                         {:infl :past-participle :surface "run"}]]
          [{:exceptions exceptions :cat :verb :sem {:pred :run}}])
 "say" (let [exceptions [{:infl :past-simple :surface "said"}
                         {:infl :past-participle :surface "said"}]]
         [{:exceptions exceptions :cat :verb :sem {:pred :say}}])
 "see" (let [exceptions [{:infl :past-simple :surface "saw"}
                         {:infl :past-participle :surface "seen"}]]
         [{:exceptions exceptions
           :cat :verb
           :sem {:pred :see}}])
 "seem" [{:cat :verb :sem {:pred :seem} :subcat {:1 :top :2 :top}}]
 "show" [{:cat :verb :sem {:pred :show} :subcat {:1 :top :2 :top}}]
 "sleep" (let [exceptions [{:infl :past-simple :surface "slept"}
                           {:infl :past-participle :surface "slept"}]]
           [{:exceptions exceptions :cat :verb :sem {:pred :sleep}
             :subcat {:1 :top :2 []}}])
 "start" [{:cat :verb :sem {:pred :start} :subcat {:1 :top :2 :top}}]
 "take" (let [exceptions [{:infl :past-simple :surface "took"}
                          {:infl :past-participle :surface "taken"}]]
          [{:cat :verb :sem {:pred :take}
            :exceptions exceptions}])
 "talk" [{:cat :verb
          :sem {:pred :talk}
          :subcat {:1 :top
                   :2 []}}
         {:cat :verb
          :sem {:pred :talk}
          :subcat {:1 :top
                   :2 {:cat :prep
                       :sem {:pred :to}}
                   :3 []}}]
 "teach" (let [exceptions [{:infl :past-simple :surface "taught"}
                           {:infl :past-participle :surface "taught"}]]
           [{:exceptions exceptions :cat :verb :sem {:pred :teach}}])
 "tell" (let [exceptions [{:infl :past-simple :surface "told"}
                          {:infl :past-participle :surface "told"}]]
          [{:exceptions exceptions
            :cat :verb :sem {:pred :tell}}])
 "think" (let [exceptions [{:infl :past-simple :surface "thought"}
                           {:infl :past-participle :surface "thought"}]]
           [{:exceptions exceptions :cat :verb :sem {:pred :think}}])
 "try" [{:cat :verb
         :sem {:pred :try}
         :modal :infinitive}]
 "turn" [{:cat :verb :sem {:pred :turn}}]
 "use" [{:cat :verb :sem {:pred :use}}]
 "walk" [{:cat :verb :sem {:pred :walk}}]
 "want" [{:cat :verb
          :sem {:pred :want}
          :modal :infinitive}]
 ;; TODO: using "will" as an example of using
 ;; a single lexeme and deriving all 4 aux-senses:
 ;; {intrans,trans} x {decl,interog} = {intrans + decl, intrans + interog, trans + decl, trans + interog}
 "will" [{:aux true
          :cat :verb
          :infl :present
          :inflected? true
          :modal true
          :sem {:tense :future}
          :subcat {:2 {:cat :verb
                       :infl :base}}}]
 
 "would" [{:aux true
           :cat :verb
           :infl :present
           :inflected? true
           :sem {:tense :conditional}
           :subcat {:2 []}}
          {:aux true
           :cat :verb
           :infl :present
           :inflected? true
           :sem {:tense :conditional}
           :subcat {:2 {:cat :verb
                        :infl :base}}}]

 "work" [{:cat :verb :sem {:pred :work}}]}
