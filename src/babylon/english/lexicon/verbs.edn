{
 "ask" [{:cat :verb :sem {:pred :ask}}]
 "be" (let [exceptions [{:infl :present :agr {:person :1st :number :sing} :surface "am"
                         :subcat {:1 {:phrasal false}}}
                        {:infl :present :agr {:person :3rd :number :sing} :surface "is"}
                        {:infl :present :surface "are"}
                        {:infl :past-simple :agr {:number :plur} :surface "were"}
                        {:infl :past-simple :agr {:person :2nd} :surface "were"}
                        {:infl :past-simple :surface "was"}]
                         
            ;; the 3 possible subcategorizations for "be":
            subject-only {:1 {:cat :noun}
                          :2 []}

            subject-object-noun
            ;; TODO: they must agree in number 
            {:1 {:cat :noun}
             :2 {:cat :noun}
             :3 []}

            subject-adjective {:1 {:cat :noun}
                               :2 {:cat :adjective}
                               :3 []}]
        [{:cat :verb
          :sem {:pred :be}
          :subcat subject-only
          :exceptions exceptions}
         {:cat :verb
          :sem {:pred :be}
          :subcat subject-object-noun
          :exceptions exceptions}
         {:cat :verb
          :sem {:pred :be}
          :subcat subject-adjective
          :exceptions exceptions}
         {:cat :verb
          :aux true
          :infl :present
          :sem {:tense :present
                :aspect :progressive}
          :subcat {:1 {:infl :gerund}}
          :exceptions exceptions}
         {:cat :verb
          :aux true
          :infl :past-simple
          :sem {:tense :past
                :aspect :progressive}
          :subcat {:1 {:infl :gerund}}
          :exceptions exceptions}])
 
 "become" (let [exceptions [{:infl :past-simple
                             :surface "became"}
                            {:infl :past-perfect
                             :surface "become"}]]
           [{:cat :verb :sem {:pred :become}
             :exceptions exceptions}])

 "begin" (let [exceptions [{:infl :past-simple
                            :surface "began"}
                           {:infl :past-perfect
                            :surface "begun"}]]
          [{:cat :verb :sem {:pred :begin}
            :exceptions exceptions}])

 "call" [{:cat :verb :sem {:pred :call}}]

 "come" (let [exceptions [{:infl :past-simple
                           :surface "came"}
                          {:infl :past-perfect
                           :surface "come"}]]
          [{:cat :verb :sem {:pred :come} :subcat {:2 []}
            :exceptions exceptions}])
 
 "do" (let [exceptions [{:infl :past-simple :surface "did"}]]
          [{:exceptions exceptions
            :cat :verb :sem {:pred :do}}])
 "eat" (let [exceptions [{:infl :past-simple :surface "ate"}]]
         [{:exceptions exceptions :cat :verb :sem {:pred :eat}}])
 "feel" (let [exceptions [{:infl :past-simple :surface "felt"}]]
           [{:exceptions exceptions :cat :verb :sem {:pred :feel}}])
 "find" (let [exceptions [{:infl :past-simple :surface "found"}]]
          [{:exceptions exceptions :cat :verb :sem {:pred :find}}])
 "get" (let [exceptions [{:infl :past-simple :surface "got"}]]
         [{:exceptions exceptions :cat :verb :sem {:pred :get}}])
 "give" (let [exceptions [{:infl :past-simple :surface "gave"}]]
          [{:exceptions exceptions :cat :verb :sem {:pred :give}}])
 "go"
 (let [exceptions [{:infl :past-simple :surface "went"}]]
   [{:exceptions exceptions
     :cat :verb :sem {:pred :go}
     :subcat {:2 []}}
    {:exceptions exceptions
     :cat :verb :sem {:pred :go}
     :subcat {:2 {:cat :prep
                  :sem {:pred :to}}
              :3 []}}])
 "have" (let [exceptions [{:infl :present
                           :agr {:person :3rd :number :sing}
                           :surface "has"}
                          {:infl :past-simple
                           :surface "had"}]]
           [{:cat :verb
             :sem {:pred :have}
             :exceptions exceptions}
            {:cat :verb
             :aux true
             :infl :present
             :sem {:tense :past
                   :aspect :perfect}
             :subcat {:1 {:infl :past-participle}}
             :exceptions exceptions}
            {:cat :verb
             :aux true
             :infl :past-simple
             :sem {:tense :past
                   :aspect :pluperfect}
             :subcat {:1 {:infl :past-participle}}
             :exceptions exceptions}])

 "hear" (let [exceptions [{:infl :past-simple :surface "heard"}]]
          [{:exceptions exceptions :cat :verb :sem {:pred :hear}}])
 "help" [{:cat :verb :sem {:pred :help} :subcat {:1 :top :2 :top}}]
 "keep" (let [exceptions [{:infl :past-simple :surface "kept"}]]
           [{:exceptions exceptions :cat :verb :sem {:pred :keep}}])
 "know" (let [exceptions [{:infl :past-simple :surface "knew"}]]
          [{:exceptions exceptions :cat :verb :sem {:pred :know}}])
 "leave" (let [exceptions [{:infl :past-simple :surface "left"}]]
           [{:exceptions exceptions :cat :verb :sem {:pred :leave}}])
 "let" (let [exceptions [{:infl :past-simple :surface "let"}]]
          [{:exceptions exceptions :cat :verb :sem {:pred :let}}])
 "like" [{:cat :verb :sem {:pred :like}}]
 "live" [{:cat :verb :sem {:pred :live}}]
 "look" [{:cat :verb :sem {:pred :look}
          :subcat {:1 :top :2 []}}
         {:cat :verb :sem {:pred :look}
          :subcat {:1 :top
                   :2 {:cat :prep
                       :sem {:pred :at}}
                   :3 []}}]
 "make" (let [exceptions [{:infl :past-simple :surface "made"}]]
          [{:exceptions exceptions :cat :verb :sem {:pred :make}}])
 "mean" (let [exceptions [{:infl :past-simple :surface "meant"}]]
          [{:exceptions exceptions :cat :verb :sem {:pred :mean}}])
 "move" [{:cat :verb :sem {:pred :move} :subcat {:1 :top :2 :top}}]
 "need" [{:cat :verb :sem {:pred :need} :subcat {:1 :top :2 :top}}]
 "play" [{:cat :verb :sem {:pred :play} :subcat {:1 :top :2 :top}}]
 "put" (let [exceptions [{:infl :past-simple :surface "put"}]]
         [{:exceptions exceptions :cat :verb :sem {:pred :put}}])
 "run" (let [exceptions [{:infl :past-simple :surface "ran"}]]
          [{:exceptions exceptions :cat :verb :sem {:pred :run}}])
 "say" (let [exceptions [{:infl :past-simple :surface "said"}]]
         [{:exceptions exceptions :cat :verb :sem {:pred :say}}])
 "see" (let [exceptions [{:infl :past-simple :surface "saw"}]]
         [{:exceptions exceptions :cat :verb :sem {:pred :see}}])
 "seem" [{:cat :verb :sem {:pred :seem} :subcat {:1 :top :2 :top}}]
 "show" [{:cat :verb :sem {:pred :show} :subcat {:1 :top :2 :top}}]
 "sleep" (let [exceptions [{:infl :past-simple :surface "slept"}]]
           [{:exceptions exceptions :cat :verb :sem {:pred :sleep} :subcat {:1 :top :2 []}}])
 "start" [{:cat :verb :sem {:pred :start} :subcat {:1 :top :2 :top}}]
 "take" (let [exceptions [{:infl :past-simple :surface "took"}]]
          [{:cat :verb :sem {:pred :take}
            :exceptions exceptions}])
 "talk" [{:cat :verb :sem {:pred :talk} :subcat {:1 :top :2 []}}
         {:cat :verb :sem {:pred :talk}
          :subcat {:1 :top
                   :2 {:cat :prep
                       :sem {:pred :to}}
                   :3 []}}]
 "teach" (let [exceptions [{:infl :past-simple :surface "taught"}]]
           [{:exceptions exceptions :cat :verb :sem {:pred :teach}}])
 "tell" (let [exceptions [{:infl :past-simple :surface "told"}]]
          [{:exceptions exceptions
            :cat :verb :sem {:pred :tell}}])
 "think" (let [exceptions [{:infl :past-simple :surface "thought"}]]
           [{:exceptions exceptions :cat :verb :sem {:pred :think}}])
 "try" [{:cat :verb :sem {:pred :try}}]
 "turn" [{:cat :verb :sem {:pred :turn}}]
 "use" [{:cat :verb :sem {:pred :use}}]
 "walk" [{:cat :verb :sem {:pred :walk}}]
 "want" [{:cat :verb :sem {:pred :want}}]
 "will" [{:aux true
          :cat :verb
          :infl :present
          :sem {:tense :future}
          :subcat {:1 {:infl :base}}}]
 "would" [{:aux true
           :cat :verb
           :infl :present
           :sem {:tense :conditional}
           :subcat {:1 {:infl :base}}}]
 "work" [{:cat :verb :sem {:pred :work}}]}
