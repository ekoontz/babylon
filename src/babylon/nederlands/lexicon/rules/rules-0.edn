[{:rule :noun-semantics
  :if {:cat :noun}
  :then [(let [number (atom :top)]
           {:agr {:number number}
            :sem {:ref {:number number}}})]}
 {:rule :adjectives-have-empty-modifiers
  :if {:cat :adjective
       :sem {:mod ::unspec}}
  :then [{:sem {:mod []}}]}

 {:rule :verbs-have-empty-modifiers
  :if {:cat :verbx
       :mod ::unspec}
  :then [{:mod []}]}

 {:rule :dont-inflect-complementizers
  :if {:cat :comp}
  :then [{:inflected? true}]}

 {:rule :dont-inflect-intensifiers
  :if {:cat :intensifier}
  :then [{:inflected? true}]}

 {:rule :dont-inflect-neg
  :if {:cat :neg}
  :then [{:inflected? true}]}
 
 {:rule :dont-inflect-prepositions
  :if {:cat :prep}
  :then [{:inflected? true}]}

 {:rule :dont-inflect-determiners
  :if {:cat :det}
  :then [{:inflected? true}]}

 {:rule :intensifier-semantics
  :if {:cat :intensifier}
  :then [(let [adj-mod (atom :top)
               adj-pred (atom :top)
               intensifier-sem (atom :top)]
           {:parent-sem {:pred adj-pred
                         :mod {:first intensifier-sem
                               :rest adj-mod}}
            :sem intensifier-sem
            :subcat {:1 {:cat :adjective
                         :sem {:pred adj-pred
                               :mod adj-mod}}
                     :2 []}})]}

 {:rule :nouns-are-not-pronouns
  :if {:cat :noun
       :pronoun ::unspec}
  :then [{:pronoun false}]}

 {:rule :nouns-are-not-propernouns
  :if {:cat :noun
       :propernoun ::unspec}
  :then [{:propernoun false}]}

 {:rule :nouns-have-empty-modifiers
  :if {:cat :noun
       :pronoun false
       :mod ::unspec}
  :then [{:mod []}]}

 {:rule :politeness-is-unspecified
  :if {:cat :noun
       :sem {:context ::unspec}}
  :then [{:sem {:context :unspec}}]}

 {:rule :pronoun-have-empty-modifiers
  :if {:cat :noun
       :pronoun true
       :sem {:mod ::unspec}}
  :then [{:sem {:mod []}}]}

 {:rule :propernouns-have-empty-modifiers
  :if {:cat :noun
       :pronoun false
       :propernoun true
       :sem {:mod ::unspec}}
  :then [{:sem {:mod []}}]}

 {:rule :propernouns-are-nonreflexive
  :if {:cat :noun
       :pronoun false
       :propernoun true}
  :then [{:reflexive false}]}

 {:rule :pronouns-are-nonreflexive
  :if {:cat :noun
       :pronoun true
       :reflexive ::unspec
       :propernoun false}
  :then [{:reflexive false}]}

 ;; if a verb does not specify a particular
 ;; transitivity, generate both transitive and intransitive forms
 ;; of the verb, where the second form has a noun second argument.
 {:rule :subcat-unspecified-nonaux
  :if {:cat :verb
       :aux false
       :modal false
       :subcat {:1 {:cat :noun}
                :2 ::unspec}}
  :then [{:subcat {:1 {:cat :noun
                       :subcat []}
                   :2 []}}
         {:subcat {:1 {:cat :noun
                       :subcat []}
                   :2 {:cat :noun
                       :subcat []}}}]}

 {:rule :modal-false-by-default
  :if {:cat :verb
       :modal ::unspec}
  :then [{:modal false}]}
 
 {:rule :aux-default-is-false
  :if {:cat :verb
       :aux ::unspec}
  :then [{:aux false}]}

 {:rule :empty-mod
  :if {:cat :verb :mod ::unspec}
  :then [{:mod []}]}

 ]
