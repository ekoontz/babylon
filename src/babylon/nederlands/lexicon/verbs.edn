{"komen"
 [{:cat :verb
   :sem {:pred :come}
   :subcat {:2 []}}]

 "kunnen"
 (let [exceptions [{:infl :present
                    :agr {:person :1st :number :sing}
                    :surface "kan"}
                   {:infl :present
                    :agr {:person :2nd :number :sing}
                    :surface "kunt"}
                   {:infl :present
                    :agr {:person :3rd :number :sing}
                    :surface "kan"}]]
   [{:exceptions exceptions
     :cat :verb
     :modal :base
     :sem {:pred :be-able-to}}])

 "lezen"
 (let [exceptions [{:infl :present
                    :agr {:person :1st :number :sing}
                    :surface "lees"}
                   {:infl :present
                    :agr {:person :2nd :number :sing}
                    :surface "leest"}
                   {:infl :present
                    :agr {:person :3rd :number :sing}
                    :surface "leest"}]]
   [{:exceptions exceptions
     :cat :verb
     :sem {:pred :read}}])

 "proberen"
 (let [exceptions [{:infl :present
                    :agr {:person :1st :number :sing}
                    :surface "probeer"}
                   {:infl :present
                    :agr {:person :2nd :number :sing}
                    :surface "probeert"}
                   {:infl :present
                    :agr {:person :3rd :number :sing}
                    :surface "probeert"}]]
   [{:cat :verb
     :modal :infinitive
     :sem {:pred :try}
     :exceptions exceptions}])
 
 "slapen"
 (let [exceptions [{:infl :present
                    :agr {:person :3rd :number :sing}
                    :surface "slaapt"}]]
  [{:exceptions exceptions
    :cat :verb
    :sem {:pred :sleep}
    :subcat {:2 []}}])

 "te"
 [(let [sem (atom :top)
        reflexive? (atom :top)]
    {:cat :verb
     :infl :infinitive
     :inflected? true
     :normal-transitive-defaults? false
     :reflexive reflexive?
     :sem sem
     :subcat {:1 {:cat :verb
                  :reflexive reflexive?
                  :subcat {:1 {:cat :noun}} ;; prevent "[vp:inf te te]"
                  :infl :base
                  :sem sem}
              :2 []}})]
 
 "werken"
 [{:cat :verb
   :sem {:pred :work}
   :subcat {:2 []}}]

 "veroorzaaken"
 [{:cat :verb
   :sem {:pred :cause}}]
 
 "zien"
 (let [exceptions [{:infl :present
                    :agr {:person :1st :number :sing}
                    :surface "zie"}
                   {:infl :present
                    :agr {:person :2nd :number :sing}
                    :surface "ziet"}
                   {:infl :present
                    :agr {:person :3rd :number :sing}
                    :surface "ziet"}]]
   [{:exceptions exceptions
     :cat :verb
     :sem {:pred :see}}])

 "zingen"
 [{:cat :verb
   :sem {:pred :sing}
   :subcat {:2 []}}]}
