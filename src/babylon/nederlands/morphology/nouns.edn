[{:g [#"^(.*)$"       "$1"] ;; no change in inflection for singular form.
  :p [#"^(.*)$"       "$1"] ;; no change in inflection for singular form.
  :u {:cat :noun
      :derivation {:runtime-noun-analysis {:morphology-noun-sing true}}
      :pronoun false
      :regular true
      :agr {:number :sing}}}

 ;; if a singular noun ends in a vowel (including 'y'), then noun pluralization ends in -'s (apostrophe + s).
 {:g [#"(a|i|o|u|y)$"  "$1's"] ;; baby  -> baby's
  :p [#"^(.*)'s$"      "$1"]   ;; baby's -> baby
  :u {:cat :noun
      :derivation {:runtime-noun-analysis {:apostrophe-s-plural true}}
      :pronoun false
      :agr {:number :plur}
      :regular true}}

 ;; if a singular noun ends in -heid, then noun pluralization ends in -heden:
 {:g [#"(heid)$"  "heden"] ;; mogelijkheid -> mogelijkheden
  :p [#"heden$"   "heid"]
  :u {:cat :noun
      :derivation {:runtime-noun-analysis {:heid-suffix true}}
      :pronoun false
      :agr {:number :plur}
      :regular true}}
 
  ;; noun pluralization ending in -s:
 {:g [#"([^aeiouy])(e|el|em|en|er|ie)$"  "$1$2s"] ;; tafel  -> tafels
  :p [#"^(.*)s$"   "$1"]          ;; tafels -> tafel 
  :u {:cat :noun
      :derivation {:runtime-noun-analysis {:s-plural true}}
      :pronoun false
      :agr {:number :plur}
      :regular true}}

 ;; TODO: nouns end in 's' if they end in
 ;; "aar(d), -erd,-ier when referring to people" (F. p 55).
 
 {:g [#"^(.*)aa(.)$"     "$1a$2en"] ;; haar   -> haren
  :p [#"^(.*)a(.)en$"    "$1aa$2"]  ;; haren -> haar
  :u {:cat :noun
      :derivation {:runtime-noun-analysis {:morphology-noun-plur-repeated-vowel true}}
      :pronoun false
      :agr {:number :plur}
      :regular true}}

 {:g [#"^(.*)ee(.)$"     "$1e$2en"] ;; been   -> benen
  :p [#"^(.*)e([nr])en$" "$1ee$2"]  ;; benen -> been
  :u {:cat :noun
      :derivation {:runtime-noun-analysis {:morphology-noun-plur-repeated-vowel true}}
      :pronoun false
      :agr {:number :plur}
      :regular true}}

 {:g [#"^(.*ui)s$"    "$1zen"] ;; huis   -> huizen
  :p [#"^(.*ui)zen$"  "$1s"] 
  :u {:cat :noun
      :derivation {:runtime-noun-analysis {:morphology-noun-plur-s2z true}}
      :pronoun false
      :agr {:number :plur}
      :regular true}}

 ;; jas    -> jassen
 ;; but not:
 ;; fiets  -> *fietssen
 {:g [#"^(.*[^t])s$"    "$1ssen"] 
  :p [#"^(.*[^t])ssen$" "$1s"] 
  :u {:cat :noun
      :derivation {:runtime-noun-analysis {:morphology-noun-plur-repeated-consonant true}}
      :pronoun false
      :agr {:number :plur}
      :regular true}}

 {:g [#"^(.*)t$"    "$1tten"] ;; kat    -> katten
  :p [#"^(.*)tten$"  "$1t"] 
  :u {:cat :noun
      :derivation {:runtime-noun-analysis {:morphology-noun-plur-repeated-consonant true}}
      :pronoun false
      :agr {:number :plur}
      :regular true}}

 {:g [#"^(.*)n$"    "$1nnen"] ;; man    -> mannen
  :p [#"^(.*)nnen$"  "$1n"] 
  :u {:cat :noun
      :derivation {:runtime-noun-analysis {:morphology-noun-plur-repeated-consonant true}}
      :pronoun false
      :agr {:number :plur}
      :regular true}}

 {:g [#"^(.*)f$"    "$1ven"] ;; druif   -> druiven
  :p [#"^(.*)ven$"  "$1f"] 
  :u {:cat :noun
      :derivation {:runtime-noun-analysis {:morphology-noun-plur-f2v true}}
      :pronoun false
      :agr {:number :plur}
      :regular true}}

 ;; TODO: parsing falls through to this catch-all rule,
 ;; thus matches incorrect inputs e.g. *"beenen";
 ;; i.e. incorrectly allows inputs *"beenen" as a plural form of "been".
 {:g [#"^(.*)$"       "$1en"] ;; hond   -> honden
  :p [#"^(.*)en$"      "$1"]  ;; honden -> dog
  :u {:cat :noun
      :derivation {:runtime-noun-analysis {:morphology-noun-plur-otherwise true}}
      :pronoun false
      :agr {:number :plur}
      :regular true}}]


