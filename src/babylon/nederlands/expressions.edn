[
 ;; TODO: derive the general case from the specific automatically rather
 ;; than having to list these specifications in pairs:
 ;;    (i.e. specific np, general np, specific np with adjective, etc..)
 {:note "'een huis'"
  :rule "np"
  :agr {:number :sing}
  :sem {:mod []
        :pred :house
        :quant :indef}}
 {:note "generalization of the above:"
  :generic true
  :rule "np"
  :sem {:mod []}}

 {:note "'het grote boeken'"
  :rule "np"
  :agr {:number :plur}  
  :sem {:mod {:first {:pred :big}}
        :quant :def
        :pred :book}}
 {:note "generalization of the above:"
  :generic true
  :rule "np"
  :sem {:mod {:first {:pred :top}}}}
 
 {:note "'een heel klein druif'"
  :rule "np"
  :agr {:number :sing}
  :sem {:pred :grape
        :quant :indef
        :mod {:first {:pred :small
                      :mod {:first {:pred :very}}}}}}
 {:note "generalization of the above:"
  :rule "np"
  :generic true  
  :sem {:mod {:first {:pred :top
                      :mod {:first {:pred :top}}}}}}
 
 {:note "'De heel klein oud fietsen'."
  :agr {:number :plur}
  :rule "np"
  :sem {:mod {:first {:pred :small
                      :mod {:first {:pred :very}}}
              :rest {:first {:pred :old}}}
        :pred :bike
        :quant :def}}
 {:note "generalization of the above:"
  :generic true
  :rule "np"
  :sem {:mod {:first {:pred :top
                      :mod {:first {:pred :top}}}
              :rest {:first {:top :top}}}}}
 
 {:note "'De heel sterk slimme vrouen zingen'."
  :rule "s" 
  :agr {:number :plur}
  :sem {:pred :sing
        :subj {:pred :woman
               :context :neutral
               :mod {:first {:pred :strong
                             :mod {:first {:pred :very}}}
                     :rest {:first {:pred :smart}}}}
        :quant :def}}
 {:note "generalization of the above:"
  :generic true
  :rule "s" 
  :sem {:subj {:mod {:first {:mod {:first {:pred :top}}}
                     :rest {:first {:top :top}}}}}}

 {:note "sentence with direct object."
  :generic true
  :backtrack? true
  :cat :verb
  :subcat []
  :modal false
  :sem {:pred :see
        :obj {:top :top}}}]
                    
