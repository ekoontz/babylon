[{:rule "intensifier" ;; 'heel groot'
  :cat :adjective
  :head {:cat :intensifier}
  :comp {:cat :adjective}
  :unify [babylon.ug/comp-is-root
          babylon.ug/head-first
          babylon.ug/parent-sem
          babylon.ug/shared-def
          babylon.ug/subcat-a]}

 {:rule "nbar" ;; '[nbar .groet +kat]'
  :cat :noun
  :head {:pronoun false
         :propernoun false
         :subcat {:1 {:top :top}
                  :2 []}}
  :slash false
  :comp {:cat :adjective
         :modifies-noun true}
  :unify [babylon.ug/cons-mod-nominal
          babylon.ug/head-last
          babylon.ug/head-is-root
          babylon.ug/head-rule
          babylon.ug/nominal-phrase
          babylon.ug/shared-agr
          babylon.ug/shared-def
          babylon.ug/subcat-b]}

 {:rule "np"
  :reflexive false
  :agr {:person :3rd}
  :cat :noun
  :slash false
  :comp {:phrasal false}
  :options [{:agr {:number :plur}}
            {:agr {:number :sing}}]
  :unify [babylon.ug/head-is-root
          babylon.ug/head-last
          babylon.ug/head-rule
          babylon.ug/nest-mod-nominal
          babylon.ug/shared-def
          babylon.ug/shared-number
          babylon.ug/subcat-a]}

 {:rule "s"
  :cat :verb
  :subcat []
  :options babylon.nederlands/finite-tenses  
  :unify [babylon.ug/head-aux
          babylon.ug/head-is-root
          babylon.ug/head-last
          babylon.ug/head-rule
          babylon.ug/head-sem
          babylon.ug/subcat-a]}

 {:rule "vp" ;; [vp +see .it]
  :cat :verb
  :aux false
  :slash false
  :options babylon.nederlands/finite-plus-inf-tense
  :head {:aux false}
  :unify [babylon.ug/head-first
          babylon.ug/head-is-root
          babylon.ug/head-reflexive
          babylon.ug/head-rule
          babylon.ug/head-sem
          babylon.ug/slash-is-head-slash
          babylon.ug/subcat-c]}

 {:rule "vp-np" ;; [vp-np .[np de kat] [vp-inf +te .zien]]
  :cat :verb
  :aux false
  :slash false
  :options babylon.nederlands/inf-tense
  :head {:aux false}

  ;; TODO: remove: should be handled by head:
  :comp {:cat :noun}

  :unify [babylon.ug/head-last
          babylon.ug/head-is-root
          babylon.ug/head-reflexive
          babylon.ug/head-rule
          babylon.ug/head-sem
          babylon.ug/slash-is-head-slash
          babylon.ug/subcat-c]}

 {:rule "vp-inf" ;; [vp +te .slapen]
  :cat :verb
  :aux false
  :slash false
  :infl :infinitive
  :head {:canonical "te"}
  :unify [babylon.ug/head-first
          babylon.ug/comp-is-root
          babylon.ug/head-reflexive
          babylon.ug/head-rule
          babylon.ug/head-sem
          babylon.ug/slash-is-head-slash
          babylon.ug/subcat-d]}

 {:rule "s-b" ;; '[.samen +bestrijden]'
  :prod? false
  :cat :verb
  :subcat {:1 {:top :top}
           :2 {:top :top}
           :3 []}
  :mod {:rest []}
  :reflexive false
  :head {:cat :verb
         :infl :base
         :canonical "bestrijden"}
  :comp {:cat :adverb
         :canonical "samen"}
  :unify [babylon.ug/cons-mod
          babylon.ug/head-is-root
          babylon.ug/head-last
          babylon.ug/head-rule
          babylon.ug/head-sem
          babylon.ug/subcat-b
          ]}
 
 {:rule "w-s-b" ;; [w-s-b .we +[s-b .samen +bestrijden]]
  :prod? false
  :cat :verb
  :reflexive false
  :infl :present
  :comp {:canonical "we"
         :phrasal false}
  :head {:rule "s-b"
         :phrasal true}
  :unify [babylon.ug/head-last
          babylon.ug/head-is-root
          babylon.ug/head-sem
          babylon.ug/nest-mod
          babylon.ug/subcat-e
          ]}

 ;; (->> "moeten we samen bestrijden" parse (map syntax-tree))
 {:rule "m-w-s-b" ;; "[m-w-s-b +moeten .[w-s-b .we +[s-b .samen +bestrijden]]]"
  :prod? false
  :cat :verb

  ;; should not need to specify this, but if we don't, we
  ;; get 2 parses (one where {:reflexive true},
  ;; and one (expected) {:reflexive false}:
  :reflexive false

  :head {:canonical "moeten"
         :phrasal false}
  :comp {:rule "w-s-b"
         :phrasal true}
  :unify [babylon.ug/head-first
          babylon.ug/head-rule
          babylon.ug/subcat-f
          babylon.ug/comp-is-root
          babylon.ug/head-sem
          ]}


 ]
