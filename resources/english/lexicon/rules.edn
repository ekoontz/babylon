[{:rule :noun-semantics
  :if {:cat :noun}
  :then [(let [number (atom :top)]
           {:agr {:number number}
            :sem {:ref {:number number}}})]}
 {:rule :adjectives-have-empty-modifiers
  :if {:cat :adjective
       :sem {:mod ::unspec}}
  :then [{:sem {:mod []}}]}
 {:rule :regular-noun
  :if {:cat :noun
       :agr {:number ::unspec}
       :pronoun ::unspec
       :propernoun ::unspec
       :regular ::unspec}
  :then [{:regular true
          :pronoun false
          :propernoun false}]}

 {:rule :common-nouns-are-inhuman-by-default
  :if {:cat :noun
       :pronoun false
       :agr {:human ::unspec}}
  :then [{:agr {:human false}}]}

 {:rule :complementizer
  :if {:cat :comp}
  :then [(let [sem (atom :top)
               agr (atom :top)]
           {:agr agr
            :sem sem
            :subcat {:1 {:agr agr
                         :sem sem}}})]}
 {:rule :preposition
  :if {:cat :prep}
  :then [(let [obj (atom :top)
               agr (atom :top)
               interogative? (atom :top)]
           {:cat :prep
            :interogative? interogative?
            :agr agr
            :reflexive true
            :subcat {:1 {:case :acc
                         :interogative? interogative?
                         :reflexive true
                         :cat :noun
                         :agr agr
                         :subcat []
                         :sem obj}
                     :2 []}
            :sem {:obj obj}})
         (let [obj (atom :top)
               interogative? (atom :top)]
           {:cat :prep
            :interogative? interogative?            
            :reflexive false
            :subcat {:1 {:case :acc
                         :interogative? interogative?
                         :reflexive false
                         :cat :noun
                         :subcat []
                         :sem obj}
                     :2 []}
            :sem {:obj obj}})]}

 ;; if a verb does not specify a particular
 ;; transitivity, generate both transitive and intransitive forms
 ;; of the verb, where the second form has a noun second argument.
 {:rule :subcat-unspecified-nonaux
  :if {:cat :verb
       :aux false
       :modal false
       :subcat {:1 {:cat :noun}
                :2 ::unspec}}
  :then [{:modal false
          :subcat {:1 {:cat :noun
                       :subcat []}
                   :2 []}}
         {:modal false
          :subcat {:1 {:cat :noun
                       :subcat []}
                   :2 {:cat :noun
                       :subcat []}}}]}
 
 {:rule :aux-default-is-false
  :if {:cat :verb
       :aux ::unspec}
  :then [{:aux false}]}

 ;; <non-inflecting rules>
 ;;
 ;; Closed-class words don't inflect. Need to
 ;; set :inflected? so that menard.lexiconfn/analyze
 ;; will find them properly.

 {:rule :dont-inflect-adjectives
  :if {:cat :adjective}
  :then [{:inflected? true}]}

 {:rule :dont-inflect-complementizers
  :if {:cat :comp}
  :then [{:inflected? true}]}

 {:rule :dont-inflect-intensifiers
  :if {:cat :intensifier}
  :then [{:inflected? true}]}
 
 {:rule :dont-inflect-neg
  :if {:cat :neg}
  :then [{:inflected? true}]}
 
 {:rule :dont-inflect-prepositions
  :if {:cat :prep}
  :then [{:inflected? true}]}

 {:rule :dont-inflect-determiners
  :if {:cat :det}
  :then [{:inflected? true}]}
 
 ;; </non-inflecting rules>

 {:rule :intensifier-semantics
  :if {:cat :intensifier}
  :then [(let [adj-mod (atom :top)
               adj-pred (atom :top)
               intensifier-sem (atom :top)]
           {:parent-sem {:pred adj-pred
                         :mod {:first intensifier-sem
                               :rest adj-mod}}
            :sem intensifier-sem
            :subcat {:1 {:cat :adjective
                         :sem {:pred adj-pred
                               :number? false
                               :mod adj-mod}}
                     :2 []}})]}

 {:rule :modal-default-false
  :if {:cat :verb
       :modal ::unspec}
  :then [{:modal false}]}

 {:rule :pronouns-are-not-reflexive-by-default
  :if {:cat :noun
       :pronoun true
       :reflexive ::unspec}
  :then [{:reflexive false}]}

 {:rule :pronouns-are-not-wh-words-by-default
  :if {:cat :noun
       :pronoun true
       :wh-word ::unspec}
  :then [{:wh-word false}]}

 {:rule :nouns-have-empty-modifiers
  :if {:cat :noun
       :mod ::unspec}
  :then [{:mod []}]}

 {:rule :pronoun-have-empty-modifiers
  :if {:cat :noun
       :pronoun true
       :sem {:mod ::unspec}}
  :then [{:sem {:mod []}}]}

 {:rule :propernouns-have-empty-modifiers
  :if {:cat :noun
       :propernoun true
       :sem {:mod ::unspec}}
  :then [{:sem {:mod []}}]}

 {:rule :verbs-have-empty-modifiers
  :if {:cat :verb
       :mod ::unspec}
  :then [{:mod []}]}

 {:rule :verbs-have-empty-sem-modifiers
  :if {:cat :verb
       :sem {:mod ::unspec}}
  :then [{:sem {:mod []}}]}

 {:rule :adjectives-not-numbers-by-default
  :if {:cat :adjective
       :sem {:number? ::unspec}}
  :then [{:sem {:number? false}}]}

 {:rule :irregular-common-noun
  :if {:cat :noun
       :pronoun ::unspec
       :propernoun ::unspec
       :regular false}
  :then [{:pronoun false
          :regular false
          :propernoun false}]}

 {:rule :subject-verb-agreement
  :if {:cat :verb
       :subcat {:1 {:cat :noun}}}
  :then [(let [agr (atom :top)
               subj (atom :top)]
           {:agr agr
            :sem {:subj subj}
            :subcat {:1 {:agr agr
                         :cat :noun
                         :case :nom
                         :sem subj
                         :subcat []}}})]}
 
 {:rule :dont-inflect-pronouns
  :if {:cat :noun
       :pronoun true}
  :then [{:inflected? true}]}

 {:rule :dont-inflect-propernouns
  :if {:cat :noun
       :propernoun true}
  :then [{:inflected? true}]}

 ;; TODO: move reflexive and agreement stuff to rules-2.edn so that
 ;; modal-infinitive is simpler and clearer.
 {:rule :modal-infinitive
  :if {:cat :verb
       :modal :infinitive}
  :then [;; intransitive: "she tries"
         {:sem {:obj :none}
          :reflexive false
          :subcat {:2 []}}

         ;; transitive and non-reflexive: "she tries to see it"
         (let [subj (atom :top)
               obj (atom {:subj subj})]
           {:reflexive false
            :sem {:subj subj
                  :obj obj}
            :subcat {:2 {:infl :infinitive
                         :cat :verb
                         :phrasal true
                         :reflexive false
                         :sem obj
                         :subcat {:1 {:sem subj}
                                  :2 []}}}})

         ;; transitive and reflexive: "she tries to see herself"
         (let [subj-ref (atom :top)
               subj (atom {:ref subj-ref})
               obj (atom {:subj subj
                          :obj {:ref subj-ref}})
               agr (atom :top)]
           {:reflexive true
            :agr agr
            :sem {:subj subj
                  :obj obj}
            :subcat {:2 {:agr agr
                         :infl :infinitive
                         :phrasal true
                         :cat :verb
                         :reflexive true
                         :sem obj
                         :subcat {:1 {:sem subj}
                                  :2 []}}}})]}
  {:rule :modal-base
  :if {:cat :verb
       :modal :base}
  :then (let [subj (atom :top)
              subcat-subj (atom {:sem subj})
              obj (atom {:subj subj})]
          [;; "I can/could"
           {:derivation {:1 {:modal-base {:marker 1}}}
            :inflected? true
            :sem {:obj :none}
            :subcat {:2 []}} ;; "can"

           ;;  "can/could <vp[base,nonmodal]>" non-reflexive
           {:derivation {:1 {:modal-base {:marker 2}}}
            :inflected? true
            :sem {:subj subj
                  :obj obj}
            :subcat {:2 {:aux false
                         :infl :base
                         :cat :verb
                         :modal false
                         :sem obj
                         :subcat {:1 subcat-subj
                                  ;; the complement has only [:subcat :1]
                                  ;; and no [:subcat :2]: 
                                  ;; e.g. in both:
                                  ;; "can [sleep]" : intransitive.
                                  ;; "can [see it]": transitive with object.
                                  ;; The bracketed expressions in each of the
                                  ;; examples above subcategorizes only for
                                  ;; the subject, with the object
                                  ;; either not existing ("sleep") or already
                                  ;; satisfied ("see it").
                                  :2 []
                                  }}}}])}
 {:rule :aux-verbs
  :if {:cat :verb
       :aux true
       :subcat {:1 {:cat :noun}}}
  :then (let [agr (atom :top)
              subject (atom {:agr agr
                             :cat :noun
                             :subcat []})]
          [{:agr agr
            :subcat {:1 subject}}])}

 {:rule :ditransitive-false
  :if {:cat :verb
       :normal-transitive-defaults? true
       :subcat {:3 ::unspec}}
  :then [{:cat :verb
          :subcat {:3 []}}]}

  {:rule :determiner-expansion
  :if {:cat :det
       :agr ::unspec}
  :then [{:agr {:number :sing}}
         {:agr {:number :plur}}]}

 {:rule :common-noun
  :if {:cat :noun
       :propernoun false
       :pronoun false
       :subcat ::unspec
       :agr {:number ::unspec}}
  :then [(let [agr (atom {:number :sing
                          :person :3rd})]
           ;; "a/the dog sleeps"
           {:cat :noun
            :reflexive false
            :propernoun false
            :pronoun false
            :agr agr
            :subcat {:1 {:cat :det :agr agr}
                     :2 []}})
         ;; "the/some dogs sleep"
         (let [agr (atom {:number :plur
                          :person :3rd})]
           {:cat :noun
            :reflexive false
            :propernoun false
            :pronoun false
            :agr agr
            :subcat {:1 {:cat :det :agr agr}
                     :2 []}})
         ;; "dogs sleep"
         {:cat :noun
          :reflexive false
          :propernoun false
          :pronoun false
          :sem {:quant :some}
          :agr {:number :plur
                :person :3rd}
          :subcat []}]}

 {:rule :irregular-plural-common-noun
  :if {:cat :noun
       :propernoun false
       :pronoun false
       :regular false
       :subcat ::unspec
       :agr {:number :plur}}
  :then [(let [agr (atom {:number :plur
                          :person :3rd})]
           {:cat :noun
            :reflexive false
            :propernoun false
            :pronoun false
            :agr agr
            :subcat {:1 {:cat :det :agr agr}
                     :2 []}})
         {:cat :noun
          :reflexive false
          :propernoun false
          :pronoun false
          :agr {:number :plur
                :person :3rd}
          :sem {:quant :some}
          :subcat []}]}

 {:rule :irregular-singular-common-noun
  :if {:cat :noun
       :propernoun false
       :pronoun false
       :regular false
       :subcat ::unspec
       :agr {:number :sing}}
  :then [(let [agr (atom {:number :sing
                          :person :3rd})]
           {:cat :noun
            :reflexive false
            :propernoun false
            :pronoun false
            :agr agr
            :subcat {:1 {:cat :det :agr agr}
                     :2 []}})]}

 {:rule :reflexive-is-accusative
  :if {:cat :noun
       :pronoun true
       :reflexive true}
  :then [{:propernoun false
          :subcat []
          :case :acc}]}

 {:rule :nonreflexive
  :if {:cat :noun
       :pronoun true
       :reflexive false}
  :then [{:propernoun false
          :subcat []}]}

 {:rule :propernoun
  :if {:cat :noun
       :pronoun false
       :propernoun true}
  :then [{:agr {:person :3rd
                :number :sing}
          :interogative? false
          :reflexive false
          :subcat []}]}
 
 {:rule :transitive-verbs ;; "sees" in "she sees him"
  :if {:cat :verb
       :subcat {:2 {:cat :noun}}}
  :then [;; non-reflexive: subject and object are distinct and unrelated grammatically.
         (let [subj (atom :top)
               obj (atom {:obj :none})]
           {:derivation {:2 {:transitive-verbs {:reflexive false}}}
            :reflexive false
            :sem {:obj obj}
            :subcat {:2 {:cat :noun
                         :reflexive false
                         :case :acc
                         :sem obj}}})

         ;; reflexive: subject and object are the same semantically and by agreement.
         (let [ref (atom :top)
               subj (atom {:ref ref})
               obj (atom {:ref ref
                          :obj :none})
               agr (atom :top)]
           {:derivation {:2 {:transitive-verbs {:reflexive true}}}
            :agr agr
            :reflexive true
            :sem {:subj subj
                  :obj obj}
            :subcat {:1 {:agr agr
                         :sem subj}
                     :2 {:agr agr
                         :phrasal false
                         :reflexive true
                         :pronoun true
                         :cat :noun
                         :sem obj
                         :case :acc}}})]}

 {:rule :modal-base ;; "must" in "it must be"
  :if {:cat :verb
       :modal :base
       :subcat {:2 {:top :top}}}
  :then (let [subj (atom :top)
              subcat-subj (atom {:sem subj})
              obj (atom {:subj subj})]
          [;;  "can see her"
           {:derivation {:2 {:modal-base {:marker 1}}}
            :reflexive false
            :subcat {:2 {:reflexive false}}}

           ;;  "can see herself"
           {:derivation {:2 {:modal-base {:marker 2}}}
            :reflexive true
            :subcat {:2 {:reflexive true}}}])}
 
 {:rule :prep-arg-verbs ;; "talks" in "she talks to him"
  :if {:cat :verb
       :subcat {:2 {:cat :prep}
                :3 []}}
  :then [(let [iobj (atom :top)]
           {:sem {:iobj iobj}
            :subcat {:2 {:cat :prep
                         :sem {:obj iobj}}}})]}

 {:rule :ditransitive-verbs ;; "gives" in "she gives it to her"
  :if {:cat :verb
       :subcat {:2 {:cat :prep}
                :3 {:cat :noun}}}
  :then [(let [iobj (atom :top)
               obj (atom :top)]
           {:sem {:iobj iobj
                  :obj obj}
            :subcat {:2 {:cat :prep
                         :sem {:obj iobj}
                         :subcat []}
                     :3 {:cat :noun
                         :case :acc
                         :sem obj
                         :subcat []}}})]}
 
 {:rule :intransitive-verbs
  :if {:cat :verb
       :normal-transitive-defaults? true
       :aux false
       :subcat {:2 []}}
  :then [{:sem {:obj :none}
          :reflexive false
          :subcat {:2 []}}]}

 {:rule :aux-verbs-with-verb-arg
  :if {:cat :verb
       :aux true
       :subcat {:2 {:cat :verb}}}
  :then (let [agr (atom :top)
              sem (atom :top)
              subject (atom {:agr agr
                             :cat :noun
                             :subcat []})
              reflexive (atom :top)
              verb-argument
              {:agr agr
               :modal false
               :reflexive reflexive
               :slash false
               :aux false
               :cat :verb
               :sem sem
               :subcat {:1 subject
                        :2 []}}
              verb-argument-slash
              {:agr agr
               :modal false
               :reflexive reflexive
               :slash true
               :aux false
               :cat :verb
               :sem sem
               :subcat {:1 subject
                        :2 {:top :top}}}]
          
          [;; [s .she *[vp-aux *has .seen]]
           {:agr agr
            :derivation {:2 {:aux-verbs-with-verb-arg {:sense 1}}}
            :reflexive reflexive
            :sem sem
            :subcat {:1 subject
                     :2 verb-argument}}

           ;; [nbar *cat .[s-slash .she *[vp-aux-slash *has .seen]]]
           {:agr agr
            :derivation {:2 {:aux-verbs-with-verb-arg {:sense 2}}}
            :reflexive reflexive
            :sem sem
            :subcat {:1 subject
                     :2 verb-argument-slash}}])}

 {:rule :nouns-are-not-interogative
  :if {:cat :noun
       :interogative? false}
  :then [{:interogative? false}]}

  {:rule :quantified-noun
  :if {:cat :noun
       :subcat {:1 {:cat :det}}}
  :then [(let [quant (atom :top)]
           {:sem {:quant quant}
            :subcat {:1 {:sem {:pred quant}}}})]}
 
 ;; verbs with prepositions as the object (e.g. "talks to her", "goes with him", etc.
 {:rule :prep-arg-reflexivity
  :if {:cat :verb
       :subcat {:2 {:cat :prep}
                :3 []}}
  :then (let [iobj (atom :top)
              agr (atom :top)]
          [{:derivation {:sense 1} ;; "talks to her"
            :reflexive false
            :subcat {:2 {:reflexive false}}}
           {:derivation {:sense 2} ;; "talks to herself"
            :reflexive true
            :sem {:subj iobj
                  :iobj iobj}
            :subcat {:1 {:agr agr}
                     :2 {:reflexive true
                         :agr agr
                         :sem {:obj iobj}}}}])}

 {:rule :ditransitive-reflexivity
  :if {:cat :verb
       :subcat {:2 {:cat :prep}
                :3 {:cat :noun}}}
  :then (let [obj (atom :top)
              iobj (atom :top)
              agr (atom :top)]
          [{:derivation {:sense 1}
            :reflexive false
            :subcat {:2 {:reflexive false}
                     :3 {:reflexive false}}}
           {:derivation {:sense 2} ;; "puts the table on himself"
            :reflexive true
            :sem {:subj iobj
                  :iobj iobj}
            :subcat {:1 {:agr agr}
                     :2 {:reflexive true
                         :agr agr
                         :sem {:obj iobj}}
                     :3 {:reflexive false}}}
           {:derivation {:sense 3} ;; "puts himself on the table"
            :reflexive true
            :sem {:subj obj
                  :obj obj}
            :subcat {:1 {:agr agr}
                     :2 {:reflexive false}
                     :3 {:agr agr
                         :sem obj
                         :reflexive true}}}])}

 ;; TODO: add semantics for both [:subcat :2]'s.
 {:rule :verb-with-s
  :if {:cat :verb
       :subcat {:2 {:rule "s"
                    :cat :verb
                    :subcat []}}}
  :then [{:subcat {:2 {:subcat []}
                   :3 []}}]}

 ;; TODO: add semantics for both [:subcat :2]'s.
 {:rule :verb-with-comp2
  :if {:cat :verb
       :subcat {:2 {:rule "comp2"
                    :cat :comp
                    :subcat []}}}
  :then [{:subcat {:2 {:subcat []}
                   :3 []}}]}]





